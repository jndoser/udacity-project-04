name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches: 
      - main

jobs:
  run-test:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the tests.
      - run: cd starter/frontend && npm test

      # Send a console message at completion.
      - run: |
          echo "Testing done."

  run-lint:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the linter.
      - run: cd starter/frontend && npm run lint

      # Send a console message at completion.
      - run: |
          echo "Linting done."

  run-build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REACT_APP_MOVIE_API_URL: 'http://localhost:5000'
    
    if: ${{ always() && needs.run-test.result == 'success' && needs.run-lint.result == 'success' }}

    needs: [run-test, run-lint]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the build.
      - run: cd starter/frontend && npm run build
      
      # Build FE application with docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: starter/frontend
          push: true
          tags: nhl0docker1/mp-frontend:latest
          build-args: |
            REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}}

      # Send a console message at completion.
      - run: |
          echo "Build done."

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role
          aws-region: aws-region-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
      - name: Deploy to Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          kubectl apply -f starter/frontend/deployment.yml --kubeconfig=kubeconfig.yaml
